package com.keola.order_service.service.impl;

import com.keola.order_service.mapper.OrderMapper;
import com.keola.order_service.model.CreateOrderRequest;
import com.keola.order_service.model.RetrieveOrderDetailResponse;
import com.keola.order_service.model.RetrieveOrderResponse;
import com.keola.order_service.model.UpdateOrderRequest;
import com.keola.order_service.model.dto.ClientDto;
import com.keola.order_service.model.dto.ClientResponse;
import com.keola.order_service.model.dto.OrderDto;
import com.keola.order_service.model.dto.ProductDto;
import com.keola.order_service.query.OrderQueryService;
import com.keola.order_service.repository.OrderRepository;
import com.keola.order_service.service.OrderService;
import com.keola.order_service.strategic.order.OrderStrategyFactory;
import com.keola.order_service.util.Util;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.Map;

@Service
@Slf4j
@RequiredArgsConstructor
public class OrderServiceImpl implements OrderService {

    private final WebClient.Builder webClientBuilder;
    private final OrderStrategyFactory orderStrategyFactory;
    private final OrderQueryService orderQueryService;
    private final OrderRepository orderRepository;
    private final OrderMapper orderMapper;

    @Override
    public Mono<RetrieveOrderResponse> listOrders(
            String filter, Integer limit, Integer offset, String sort, String user) {
        log.info("Start the method listOrders: sort: {}, filter:{} , limit: {}, offset: {}",
                sort, filter, limit, offset);
       return null;
    }

    @Override
    public Mono<ClientDto> getClientDetails(String filter) {
        String url = "http://localhost:8012/serviceclient/v1/client?filter=" + filter;
        return webClientBuilder.baseUrl(url)  // Utilizamos la URL construida
                .build()
                .get()
                .retrieve()
                .bodyToMono(ClientResponse.class)  // Deserializamos la respuesta en un objeto ClientResponse
                .flatMap(clientResponse -> {
                    // Extraemos el primer cliente de la lista de "clients"
                    if (clientResponse.getClients() != null && !clientResponse.getClients().isEmpty()) {
                        return Mono.just(clientResponse.getClients().get(0));
                    } else {
                        return Mono.error(new RuntimeException("No client found"));
                    }
                })
                .doOnError(error -> log.error("Error fetching client details: {}", error.getMessage()))
                .doOnSuccess(client -> log.info("Fetched client details successfully"));
    }

    @Override
    public Mono<ProductDto> getProductDetails(String filter, Integer limit, Integer offset, String sort) {
        return null;
    }

    @Override
    public Mono<RetrieveOrderDetailResponse> getOrderDetail(
            Integer orderId, String filter, Integer limit, Integer offset, String sort, String user) {
        return null;
    }

    @Override
    public Mono<Void> createOrder(CreateOrderRequest createOrderRequest, String user) {
        return null;
    }

    @Override
    public Mono<Void> updateOrder(UpdateOrderRequest updateOrderRequest, String user) {
        return null;
    }

    @Override
    public Mono<Void> deleteOrder(Integer orderId, String user) {
        return null;
    }
}
